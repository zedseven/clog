# Git-Cliff Configuration
# https://github.com/orhun/git-cliff

[changelog]
# Changelog Header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# Template For The Changelog Body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
	## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
	## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
	### {{ group | upper_first }}
	{% for commit in commits %}
		- {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }} ([{{ commit.id | truncate(length=8, end=\"\") }}](https://github.com/zedseven/clog/commit/{{ commit.id | truncate(length=8, end=\"\") }}))\
	{% endfor %}
{% endfor %}\n
"""
# Remove the leading and trailing whitespace from the template
trim = true
# Changelog Footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# Parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# Filter out the commits that are not conventional
filter_unconventional = true
# Process each line of a commit as an individual commit
split_commits = false
# Regex for preprocessing the commit messages
commit_preprocessors = []
# Regex for parsing and grouping commits
commit_parsers = [
	{ message = "^feat", group = "Features" },
	{ message = "^fix", group = "Bug Fixes" },
	{ message = "^deprecate", group = "Deprecated Features" },
	{ message = "^remove", group = "Removed Features" },
	{ message = "^doc", group = "Documentation" },
	{ message = "^perf", group = "Performance" },
	{ message = "^refactor", group = "Refactor" },
	{ message = "^test", group = "Testing" },
	{ message = "^ci", group = "Continuous Integration" },
	{ message = "^(?:misc|chore)\\(release\\): Prepare for ", skip = true },
	{ message = "^(?:misc|chore)", group = "Miscellaneous Tasks" }, # I hate the word "chore" - it feels too negative
	{ message = "^revert", skip = true },
	{ body = ".*security", group = "Security" },
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# Filter out the commits that are not matched by commit parsers
filter_commits = false
# Regex for matching git tags
tag_pattern = ".*"
# Regex for skipping tags
skip_tags = ""
# Regex for ignoring tags
ignore_tags = ""
# Sort the tags chronologically
date_order = true
# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# Link GitHub issue/PR numbers automatically
link_parsers = [
	{ pattern = '#(\d+)', href = "https://github.com/zedseven/clog/issues/$1" },
]
# Limit the number of commits included in the changelog
# limit_commits = 42
